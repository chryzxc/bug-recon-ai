import re
import requests
from typing import List, Dict

class VulnerabilityAnalyzer:
    def __init__(self):
        # Load common vulnerability patterns
        self.vulnerability_patterns = {
            'sql_injection': re.compile(r"('|\"|--|;|UNION|SELECT|INSERT|UPDATE|DELETE|DROP)"),
            'xss': re.compile(r"(<script|javascript:|onerror=|onload=)", re.IGNORECASE),
            'csrf': re.compile(r"(<form[^>]*(method=['\"]get['\"]))", re.IGNORECASE)
        }
        
        # Load CVE database 
        self.cve_db = self._load_cve_database()
    
    def _load_cve_database(self):
        # In a real implementation, you'd load from an actual database or API
        return {
            'Apache 2.4.49': ['CVE-2021-41773'],
            'WordPress 5.8.1': ['CVE-2021-3920', 'CVE-2021-3921']
        }
    
    def analyze_web_content(self, content: str) -> List[Dict]:
        """Analyze web content for potential vulnerabilities"""
        findings = []
        
        for vuln_type, pattern in self.vulnerability_patterns.items():
        
            if pattern.search(content):
                findings.append({
                    'type': vuln_type,
                    'severity': 'high' if vuln_type in ['sql_injection', 'xss'] else 'medium',
                    'description': f"Potential {vuln_type.replace('_', ' ')} vulnerability detected"
                })
        
        return findings
    
    def match_versions(self, service_info: Dict) -> List[str]:
        """Match service versions against known vulnerabilities"""
        product_version = f"{service_info.get('product', '')} {service_info.get('version', '')}".strip()
        return self.cve_db.get(product_version, [])